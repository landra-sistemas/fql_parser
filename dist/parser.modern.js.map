{"version":3,"file":"parser.modern.js","sources":["../src/FQLParser.mjs","../src/sql/SQLParser.mjs","../src/sql/KnexParser.mjs"],"sourcesContent":["import XRegExp from \"xregexp\";\nimport lodash from \"lodash\";\n\nexport default class FQLParser {\n\n    LIKE = \"LIKE\";\n\n    constructor(options) {\n        this.aliases = (options && options.aliases) || {};\n        this.allowGlobalSearch = (options && options.allowGlobalSearch) || false;\n\n        if (options && options.caseInsensitive) {\n            this.LIKE = \"ILIKE\";\n        }\n    }\n    /**\n     * Convierte un string 'key:value' en array de objetos con las siguientes opciones:\n     * \n     * - Objeto: { //Condición Básica\n     *  \"key\": \"\",\n     *  \"operator\": \"LIKE|NOT LIKE|>|<|BETWEEN\", //Default LIKE\n     *  \"value\": \"\",\n     *  \"logic\": \"OR|AND\" //Default AND\n     * }\n     * \n     * - Array: Agrupación de condiciones, extraída de un (). Dentro del array llevará otros array o objetos condición\n     * \n     * @param {*} str \n     * @returns \n     */\n    parse = (str) => {\n        let parsedElm = [];\n        let workStr = str;\n        const parentheses = this.splitPatentheses(str);\n\n        if (!lodash.isEmpty(parentheses)) {\n            for (const elm in parentheses) {\n                //Reemplazar el la query original cada elemento\n                workStr = workStr.replace(`${parentheses[elm]}`, `#${elm}`);\n                parsedElm.push(this.parse(parentheses[elm]));\n            }\n\n        }\n        // console.log(workStr);\n\n        return this.parseQS(workStr, parsedElm);\n\n    }\n\n\n    /**\n     * Extrae los bloques entre parentesis (solo un nivel).\n     * \n     * @param {*} str \n     * @returns \n     */\n    splitPatentheses = (str) => {\n        const test = XRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');\n        return test;\n    }\n\n\n    /**\n     * Aplica una expresión regular para extraer los parámetros de búsqueda:\n     * - key: columna\n     * - operator: operador búsqueda\n     * - value: valor a buscar\n     * - logic: operador logico a utilizar\n     * - plain: parametro plano adicional (ejemplo +test o -asdfasdf). Necesario activar allowGlobalSearch\n     * @param {*} str \n     * @param {*} subgroups \n     * @returns \n     */\n    parseQS = (str, subgroups) => {\n        const regex = /((?<key>[^\\s|^:|^!:|^>:|^<:]+)(?<operator>:|!:|>:|<:)(?<value>[^\\s|\"|\\[]+|\".*?\"|\\[.*?\\]))? ?(?<logic>OR|AND)? ?(?<plain>[\\+|\\-|\\(#][^\\s]+|)? ?/gm;\n        let m;\n\n        let data = [];\n        while ((m = regex.exec(str)) !== null) {\n            // This is necessary to avoid infinite loops with zero-width matches\n            if (m.index === regex.lastIndex) {\n                regex.lastIndex++;\n            }\n            if (m === null) {\n                continue;\n            }\n            let { key, value, operator, plain, logic } = m.groups;\n\n            if (!operator) {\n                operator = \":\";\n            }\n\n            let type = this.LIKE;\n            switch (operator) {\n                case \":\":\n                default:\n                    type = this.LIKE;\n                    break;\n                case \"!:\":\n                    type = `NOT ${this.LIKE}`;\n                    break;\n                case \">:\":\n                    type = \">\";\n                    break;\n                case \"<:\":\n                    type = \"<\";\n                    break;\n            }\n            //Los corchetes marcan rangos con lo que si se detecta se cambia el tipo LIKE a BETWEEN\n            if (value && value.match(/\\[.*?TO.*?\\]/)) {\n                type = type === `NOT ${this.LIKE}` ? \"NOT BETWEEN\" : \"BETWEEN\";\n            }\n            //Las comas implican varios valores con lo que si se detectan se cambia el tipo LIKE a IN\n            if (value && value.indexOf(',') !== -1) {\n                type = type === `NOT ${this.LIKE}` ? \"NOT IN\" : \"IN\";\n            }\n\n            if (key) {\n                data.push({\n                    key: this.checkAliases(key),\n                    operator: type,\n                    value: this.parseValue(value),\n                    logic: logic || \"AND\"\n                });\n            }\n            // Gestion para añadir los indices de los subgrupos\n            if (plain && plain.indexOf('#') !== -1) {\n                const index = plain.replace(/#|\\(|\\)/g, '');\n                data.push(subgroups[parseInt(index)]);\n            } else if (this.allowGlobalSearch && plain && plain.indexOf('#') === -1) {\n                // Añadir las busquedas plain en caso de estar activadas.\n                let op = \"plain_+\";\n                if (plain.startsWith('-')) {\n                    op = \"plain_-\";\n                }\n                data.push({\n                    operator: op,\n                    value: this.parseValueForPlainQuery(plain.replace(/\\+|\\-/gm, '')),\n                    logic: logic || \"AND\"\n                });\n            }\n        }\n        return data;\n    }\n\n\n\n    /**\n     * \n     * @param key \n     * @returns \n     */\n    checkAliases(key) {\n        if (!this.aliases) {\n            return key;\n        }\n        if (this.aliases[key]) {\n            return this.aliases[key].replaceAll(\"{{key}}\", key);\n        }\n        if (this.aliases['*']) {\n            return this.aliases['*'].replaceAll(\"{{key}}\", key);\n        }\n        return key;\n    }\n\n    /**\n     * \n     * @param value \n     * @returns \n     */\n    parseValue(value) {\n        //TODO improve\n        return value.replaceAll(/\"|\\?/g, '').replaceAll('*', '%');\n    }\n    /**\n     * \n     * @param value \n     * @returns \n     */\n    parseValueForPlainQuery(value) {\n        //TODO improve\n\n        const wildcard = value.includes(\"*\") ? \":*\" : \"\";\n        return value.replaceAll(/\"|\\?/g, '').replaceAll('*', wildcard);\n    }\n}\n","export default class SQLParser {\n\n    constructor(table, dialect = \"pg\") {\n        this.table = table;\n        this.dialect = dialect;\n    }\n\n    /**\n     * Converte una lista de condiciones generada por el FQLParser en una condición String.\n     * \n     * Esta clase sirve como base para su extensión aplicando las conversiones necesarias en función del lenguaje a utilizar.\n     * \n     * @param {Array} object\n     */\n    parse(object) {\n        let query = \"\";\n        let bindings = [];\n        for (let element of object) {\n            if (Array.isArray(element)) {\n                const { query: subqry, bindings: subbind } = this.parse(element);\n                query += `(${subqry})`;\n                bindings = [...bindings, ...subbind];\n            } else if (typeof element === 'object') {\n                const { query: condition, bindings: bind } = this.convertCondition(element);\n                query += condition;\n                bindings = [...bindings, ...bind];\n            } else {\n                console.warn('Unknown type detected in qry');\n            }\n        }\n        query = query.replace(/( AND | OR )$/gm, \"\");\n        return { query, bindings }; //Quitar condicion final\n    }\n\n    /**\n     * Metodo base a ser extendido por los parsers para realizar las conversiones\n     * \n     * @param {object} condition \n     */\n    convertCondition(condition) {\n        let { key, operator, value, logic } = condition;\n        if (!key) {\n            if (this.dialect !== \"pg\") {\n                console.warn('Only PostgreSQL supports global searching');\n                return \"\";\n            }\n\n            let op = \"\";\n            if (operator === \"plain_-\") {\n                op = \"NOT\";\n            }\n            return { query: `${op} to_tsvector(${this.table}::text) @@ to_tsquery(?) ${logic} `, bindings: [value] }\n        }\n\n\n        let binding = \"?\";\n        let parsedValue = [value]; //Eliminar las dobles comillas\n\n        if (operator === \"BETWEEN\" || operator === \"NOT BETWEEN\") {\n            parsedValue = value.replace(/\\[|\\]/gm, '');\n            parsedValue = parsedValue.split(' TO ');\n            binding = \"? AND ?\";\n        }\n        if (operator === \"IN\" || operator === \"NOT IN\") {\n            parsedValue = [value.split(',')];\n        }\n\n        return { query: `${key} ${operator} ${binding} ${logic} `, bindings: parsedValue }\n    }\n\n\n}","import SQLParser from \"./SQLParser.mjs\";\n\nexport default class KnexParser extends SQLParser {\n\n    /**\n     * \n     * @param {Knex} builder \n     * @param {object} object \n     */\n    toKnex(builder, object) {\n        const parsed = this.parse(object);\n        return builder.whereRaw(parsed.query, parsed.bindings);\n    }\n}"],"names":["FQLParser","constructor","options","this","LIKE","parse","str","parsedElm","workStr","parentheses","splitPatentheses","lodash","isEmpty","elm","replace","push","parseQS","XRegExp","matchRecursive","subgroups","regex","_wrapRegExp","key","operator","value","logic","plain","m","data","exec","index","lastIndex","groups","type","match","indexOf","checkAliases","parseValue","parseInt","allowGlobalSearch","op","startsWith","parseValueForPlainQuery","aliases","caseInsensitive","replaceAll","wildcard","includes","SQLParser","table","dialect","object","query","bindings","element","Array","isArray","subqry","subbind","condition","bind","convertCondition","console","warn","binding","parsedValue","split","KnexParser","toKnex","builder","parsed","whereRaw"],"mappings":"ouCAGe,MAAMA,EAIjBC,YAAYC,GAASC,KAFrBC,KAAO,OAyBPC,KAAAA,MAASC,IACL,IAAIC,EAAY,GACZC,EAAUF,EACd,MAAMG,EAAcN,KAAKO,iBAAiBJ,GAE1C,IAAKK,EAAOC,QAAQH,GAChB,IAAK,MAAMI,KAAOJ,EAEdD,EAAUA,EAAQM,QAAS,GAAEL,EAAYI,KAAS,IAAGA,KACrDN,EAAUQ,KAAKZ,KAAKE,MAAMI,EAAYI,KAM9C,OAAOV,KAAKa,QAAQR,EAASD,EAAS,EAW1CG,KAAAA,iBAAoBJ,GACHW,EAAQC,eAAeZ,EAAK,MAAO,MAAO,KAgB3DU,KAAAA,QAAU,CAACV,EAAKa,KACZ,MAAMC,eAAKC,EAAG,0GAAkJ,CAAAC,IAAAC,EAAAA,WAAAC,MAAA,EAAAC,MAAA,EAAAC,MAChK,IAAA,IAAIC,EAEAC,EAAO,GACX,KAAiC,QAAzBD,EAAIP,EAAMS,KAAKvB,KAAgB,CAKnC,GAHIqB,EAAEG,QAAUV,EAAMW,WAClBX,EAAMW,YAEA,OAANJ,EACA,SAEJ,IAAIL,IAAEA,EAAGE,MAAEA,EAAKD,SAAEA,EAAQG,MAAEA,EAAKD,MAAEA,GAAUE,EAAEK,OAE1CT,IACDA,EAAW,KAGf,IAAIU,EAAO9B,KAAKC,KAChB,OAAQmB,GACJ,IAAK,IACL,QACIU,EAAO9B,KAAKC,KACZ,MACJ,IAAK,KACD6B,EAAQ,OAAM9B,KAAKC,OACnB,MACJ,IAAK,KACD6B,EAAO,IACP,MACJ,IAAK,KACDA,EAAO,IAqBf,GAjBIT,GAASA,EAAMU,MAAM,kBACrBD,EAAOA,IAAU,OAAM9B,KAAKC,OAAS,cAAgB,WAGrDoB,IAAiC,IAAxBA,EAAMW,QAAQ,OACvBF,EAAOA,IAAU,OAAM9B,KAAKC,OAAS,SAAW,MAGhDkB,GACAM,EAAKb,KAAK,CACNO,IAAKnB,KAAKiC,aAAad,GACvBC,SAAUU,EACVT,MAAOrB,KAAKkC,WAAWb,GACvBC,MAAOA,GAAS,QAIpBC,IAAiC,IAAxBA,EAAMS,QAAQ,KAAa,CACpC,MAAML,EAAQJ,EAAMZ,QAAQ,WAAY,IACxCc,EAAKb,KAAKI,EAAUmB,SAASR,IACjC,MAAW,GAAA3B,KAAKoC,mBAAqBb,IAAiC,IAAxBA,EAAMS,QAAQ,KAAa,CAErE,IAAIK,EAAK,UACLd,EAAMe,WAAW,OACjBD,EAAK,WAETZ,EAAKb,KAAK,CACNQ,SAAUiB,EACVhB,MAAOrB,KAAKuC,wBAAwBhB,EAAMZ,QAAQ,UAAW,KAC7DW,MAAOA,GAAS,OAExB,CACJ,CACA,OAAOG,GAtIPzB,KAAKwC,QAAWzC,GAAWA,EAAQyC,SAAY,GAC/CxC,KAAKoC,kBAAqBrC,GAAWA,EAAQqC,oBAAsB,EAE/DrC,GAAWA,EAAQ0C,kBACnBzC,KAAKC,KAAO,QAEpB,CA0IAgC,aAAad,GACT,OAAKnB,KAAKwC,QAGNxC,KAAKwC,QAAQrB,QACDqB,QAAQrB,GAAKuB,WAAW,UAAWvB,GAE/CnB,KAAKwC,QAAQ,KACFxC,KAACwC,QAAQ,KAAKE,WAAW,UAAWvB,GAE5CA,EARIA,CASf,CAOAe,WAAWb,GAEP,OAAOA,EAAMqB,WAAW,QAAS,IAAIA,WAAW,IAAK,IACzD,CAMAH,wBAAwBlB,GAGpB,MAAMsB,EAAWtB,EAAMuB,SAAS,KAAO,KAAO,GAC9C,OAAOvB,EAAMqB,WAAW,QAAS,IAAIA,WAAW,IAAKC,EACzD,QCxLiBE,EAEjB/C,YAAYgD,EAAOC,EAAU,MACzB/C,KAAK8C,MAAQA,EACb9C,KAAK+C,QAAUA,CACnB,CASA7C,MAAM8C,GACF,IAAIC,EAAQ,GACRC,EAAW,GACf,IAAK,IAAIC,KAAWH,EAChB,GAAII,MAAMC,QAAQF,GAAU,CACxB,MAAQF,MAAOK,EAAQJ,SAAUK,GAAYvD,KAAKE,MAAMiD,GACxDF,GAAU,IAAGK,KACbJ,EAAW,IAAIA,KAAaK,EAChC,MAAO,GAAuB,iBAAZJ,EAAsB,CACpC,MAAQF,MAAOO,EAAWN,SAAUO,GAASzD,KAAK0D,iBAAiBP,GACnEF,GAASO,EACTN,EAAW,IAAIA,KAAaO,EAChC,MACIE,QAAQC,KAAK,gCAIrB,OADAX,EAAQA,EAAMtC,QAAQ,kBAAmB,IAClC,CAAEsC,QAAOC,WACpB,CAOAQ,iBAAiBF,GACb,IAAIrC,IAAEA,EAAGC,SAAEA,EAAQC,MAAEA,EAAKC,MAAEA,GAAUkC,EACtC,IAAKrC,EAAK,CACN,GAAqB,OAAjBnB,KAAK+C,QAEL,OADAY,QAAQC,KAAK,6CACN,GAGX,IAAIvB,EAAK,GAIT,MAHiB,YAAbjB,IACAiB,EAAK,OAEF,CAAEY,MAAQ,GAAEZ,iBAAkBrC,KAAK8C,iCAAiCxB,KAAU4B,SAAU,CAAC7B,GACpG,CAGA,IAAIwC,EAAU,IACVC,EAAc,CAACzC,GAWnB,MATiB,YAAbD,GAAuC,gBAAbA,IAC1B0C,EAAczC,EAAMV,QAAQ,UAAW,IACvCmD,EAAcA,EAAYC,MAAM,QAChCF,EAAU,WAEG,OAAbzC,GAAkC,WAAbA,IACrB0C,EAAc,CAACzC,EAAM0C,MAAM,OAGxB,CAAEd,MAAQ,GAAE9B,KAAOC,KAAYyC,KAAWvC,KAAU4B,SAAUY,EACzE,EClEW,MAAME,UAAmBnB,EAOpCoB,OAAOC,EAASlB,GACZ,MAAMmB,EAASnE,KAAKE,MAAM8C,GAC1B,OAAOkB,EAAQE,SAASD,EAAOlB,MAAOkB,EAAOjB,SACjD"}