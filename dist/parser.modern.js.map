{"version":3,"file":"parser.modern.js","sources":["../src/FQLParser.mjs","../src/sql/SQLParser.mjs","../src/sql/KnexParser.mjs"],"sourcesContent":["import XRegExp from \"xregexp\";\r\nimport lodash from \"lodash\";\r\n\r\nexport default class FQLParser {\r\n\r\n    LIKE = \"LIKE\";\r\n\r\n    constructor(options) {\r\n        this.aliases = (options && options.aliases) || {};\r\n        this.allowGlobalSearch = (options && options.allowGlobalSearch) || false;\r\n\r\n        if (options && options.caseInsensitive) {\r\n            this.LIKE = \"ILIKE\";\r\n        }\r\n    }\r\n    /**\r\n     * Convierte un string 'key:value' en array de objetos con las siguientes opciones:\r\n     * \r\n     * - Objeto: { //Condición Básica\r\n     *  \"key\": \"\",\r\n     *  \"operator\": \"LIKE|NOT LIKE|>|<|BETWEEN\", //Default LIKE\r\n     *  \"value\": \"\",\r\n     *  \"logic\": \"OR|AND\" //Default AND\r\n     * }\r\n     * \r\n     * - Array: Agrupación de condiciones, extraída de un (). Dentro del array llevará otros array o objetos condición\r\n     * \r\n     * @param {*} str \r\n     * @returns \r\n     */\r\n    parse = (str) => {\r\n        let parsedElm = [];\r\n        let workStr = str;\r\n        const parentheses = this.splitPatentheses(str);\r\n\r\n        if (!lodash.isEmpty(parentheses)) {\r\n            for (const elm in parentheses) {\r\n                //Reemplazar el la query original cada elemento\r\n                workStr = workStr.replace(`${parentheses[elm]}`, `#${elm}`);\r\n                parsedElm.push(this.parse(parentheses[elm]));\r\n            }\r\n\r\n        }\r\n        // console.log(workStr);\r\n\r\n        return this.parseQS(workStr, parsedElm);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Extrae los bloques entre parentesis (solo un nivel).\r\n     * \r\n     * @param {*} str \r\n     * @returns \r\n     */\r\n    splitPatentheses = (str) => {\r\n        const test = XRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');\r\n        return test;\r\n    }\r\n\r\n\r\n    /**\r\n     * Aplica una expresión regular para extraer los parámetros de búsqueda:\r\n     * - key: columna\r\n     * - operator: operador búsqueda\r\n     * - value: valor a buscar\r\n     * - logic: operador logico a utilizar\r\n     * - plain: parametro plano adicional (ejemplo +test o -asdfasdf). Necesario activar allowGlobalSearch\r\n     * @param {*} str \r\n     * @param {*} subgroups \r\n     * @returns \r\n     */\r\n    parseQS = (str, subgroups) => {\r\n        const regex = /((?<key>[^\\s|^:|^!:|^>:|^<:]+)(?<operator>:|!:|>:|<:)(?<value>[^\\s|\"|\\[]+|\".*?\"|\\[.*?\\]))? ?(?<logic>OR|AND)? ?(?<plain>[\\+|\\-|\\(#][^\\s]+|)? ?/gm;\r\n        let m;\r\n\r\n        let data = [];\r\n        while ((m = regex.exec(str)) !== null) {\r\n            // This is necessary to avoid infinite loops with zero-width matches\r\n            if (m.index === regex.lastIndex) {\r\n                regex.lastIndex++;\r\n            }\r\n            if (m === null) {\r\n                continue;\r\n            }\r\n            let { key, value, operator, plain, logic } = m.groups;\r\n\r\n            if (!operator) {\r\n                operator = \":\";\r\n            }\r\n\r\n            let type = this.LIKE;\r\n            switch (operator) {\r\n                case \":\":\r\n                default:\r\n                    type = this.LIKE;\r\n                    break;\r\n                case \"!:\":\r\n                    type = `NOT ${this.LIKE}`;\r\n                    break;\r\n                case \">:\":\r\n                    type = \">\";\r\n                    break;\r\n                case \"<:\":\r\n                    type = \"<\";\r\n                    break;\r\n            }\r\n            //Los corchetes marcan rangos con lo que si se detecta se cambia el tipo LIKE a BETWEEN\r\n            if (value && value.match(/\\[.*?\\]/)) {\r\n                type = type === `NOT ${this.LIKE}` ? \"NOT BETWEEN\" : \"BETWEEN\";\r\n            }\r\n            //Las comas implican varios valores con lo que si se detectan se cambia el tipo LIKE a IN\r\n            if (value && value.indexOf(',') !== -1) {\r\n                type = type === `NOT ${this.LIKE}` ? \"NOT IN\" : \"IN\";\r\n            }\r\n\r\n            if (key) {\r\n                data.push({\r\n                    key: this.checkAliases(key),\r\n                    operator: type,\r\n                    value: this.parseValue(value),\r\n                    logic: logic || \"AND\"\r\n                });\r\n            }\r\n            // Gestion para añadir los indices de los subgrupos\r\n            if (plain && plain.indexOf('#') !== -1) {\r\n                const index = plain.replace(/#|\\(|\\)/g, '');\r\n                data.push(subgroups[parseInt(index)]);\r\n            } else if (this.allowGlobalSearch && plain && plain.indexOf('#') === -1) {\r\n                // Añadir las busquedas plain en caso de estar activadas.\r\n                let op = \"plain_+\";\r\n                if (plain.startsWith('-')) {\r\n                    op = \"plain_-\";\r\n                }\r\n                data.push({\r\n                    operator: op,\r\n                    value: this.parseValue(plain.replace(/\\+|\\-/gm, '')),\r\n                    logic: logic || \"AND\"\r\n                });\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     * @param key \r\n     * @returns \r\n     */\r\n    checkAliases(key) {\r\n        if (!this.aliases) {\r\n            return key;\r\n        }\r\n        if (this.aliases[key]) {\r\n            return this.aliases[key].replaceAll(\"{{key}}\", key);\r\n        }\r\n        if (this.aliases['*']) {\r\n            return this.aliases['*'].replaceAll(\"{{key}}\", key);\r\n        }\r\n        return key;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param value \r\n     * @returns \r\n     */\r\n    parseValue(value) {\r\n        //TODO improve\r\n        return value.replaceAll(/\"|\\?/g, '').replaceAll('*', '%');\r\n    }\r\n}\r\n","export default class SQLParser {\r\n\r\n    constructor(table, dialect = \"pg\") {\r\n        this.table = table;\r\n        this.dialect = dialect;\r\n    }\r\n\r\n    /**\r\n     * Converte una lista de condiciones generada por el FQLParser en una condición String.\r\n     * \r\n     * Esta clase sirve como base para su extensión aplicando las conversiones necesarias en función del lenguaje a utilizar.\r\n     * \r\n     * @param {Array} object\r\n     */\r\n    parse(object) {\r\n        let query = \"\";\r\n        let bindings = [];\r\n        for (let element of object) {\r\n            if (Array.isArray(element)) {\r\n                const { query: subqry, bindings: subbind } = this.parse(element);\r\n                query += `(${subqry})`;\r\n                bindings = [...bindings, ...subbind];\r\n            } else if (typeof element === 'object') {\r\n                const { query: condition, bindings: bind } = this.convertCondition(element);\r\n                query += condition;\r\n                bindings = [...bindings, ...bind];\r\n            } else {\r\n                console.warn('Unknown type detected in qry');\r\n            }\r\n        }\r\n        query = query.replace(/( AND | OR )$/gm, \"\");\r\n        return { query, bindings }; //Quitar condicion final\r\n    }\r\n\r\n    /**\r\n     * Metodo base a ser extendido por los parsers para realizar las conversiones\r\n     * \r\n     * @param {object} condition \r\n     */\r\n    convertCondition(condition) {\r\n        let { key, operator, value, logic } = condition;\r\n        if (!key) {\r\n            if (this.dialect !== \"pg\") {\r\n                console.warn('Only PostgreSQL supports global searching');\r\n                return \"\";\r\n            }\r\n\r\n            let op = \"\";\r\n            if (operator === \"plain_-\") {\r\n                op = \"NOT\";\r\n            }\r\n            return { query: `${op} to_tsvector(${this.table}::text) @@ to_tsquery(?) ${logic} `, bindings: [value] }\r\n        }\r\n\r\n\r\n        let binding = \"?\";\r\n        let parsedValue = [value]; //Eliminar las dobles comillas\r\n\r\n        if (operator === \"BETWEEN\" || operator === \"NOT BETWEEN\") {\r\n            parsedValue = value.replace(/\\[|\\]/gm, '');\r\n            parsedValue = parsedValue.split(' TO ');\r\n            binding = \"? AND ?\";\r\n        }\r\n        if (operator === \"IN\" || operator === \"NOT IN\") {\r\n            parsedValue = [value.split(',')];\r\n        }\r\n\r\n        return { query: `${key} ${operator} ${binding} ${logic} `, bindings: parsedValue }\r\n    }\r\n\r\n\r\n}","import SQLParser from \"./SQLParser.mjs\";\r\n\r\nexport default class KnexParser extends SQLParser {\r\n\r\n    /**\r\n     * \r\n     * @param {Knex} builder \r\n     * @param {object} object \r\n     */\r\n    toKnex(builder, object) {\r\n        const parsed = this.parse(object);\r\n        return builder.whereRaw(parsed.query, parsed.bindings);\r\n    }\r\n}"],"names":["FQLParser","constructor","options","LIKE","parse","str","parsedElm","workStr","parentheses","this","splitPatentheses","lodash","isEmpty","elm","replace","push","parseQS","XRegExp","matchRecursive","subgroups","regex","m","data","exec","index","lastIndex","key","value","operator","plain","logic","groups","type","match","indexOf","checkAliases","parseValue","parseInt","allowGlobalSearch","op","startsWith","aliases","caseInsensitive","replaceAll","SQLParser","table","dialect","object","query","bindings","element","Array","isArray","subqry","subbind","condition","bind","convertCondition","console","warn","binding","parsedValue","split","KnexParser","toKnex","builder","parsed","whereRaw"],"mappings":"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"}