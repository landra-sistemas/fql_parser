{"version":3,"file":"parser.js","sources":["../src/FQLParser.mjs","../src/sql/SQLParser.mjs","../src/sql/KnexParser.mjs"],"sourcesContent":["import XRegExp from \"xregexp\";\r\nimport lodash from \"lodash\";\r\n\r\nexport default class FQLParser {\r\n\r\n    constructor(options) {\r\n        this.aliases = (options && options.aliases) || {};\r\n        this.allowGlobalSearch = (options && options.allowGlobalSearch) || false;\r\n    }\r\n    /**\r\n     * Convierte un string 'key:value' en array de objetos con las siguientes opciones:\r\n     * \r\n     * - Objeto: { //Condición Básica\r\n     *  \"key\": \"\",\r\n     *  \"operator\": \"LIKE|NOT LIKE|>|<|BETWEEN\", //Default LIKE\r\n     *  \"value\": \"\",\r\n     *  \"logic\": \"OR|AND\" //Default AND\r\n     * }\r\n     * \r\n     * - Array: Agrupación de condiciones, extraída de un (). Dentro del array llevará otros array o objetos condición\r\n     * \r\n     * @param {*} str \r\n     * @returns \r\n     */\r\n    parse = (str) => {\r\n        let parsedElm = [];\r\n        let workStr = str;\r\n        const parentheses = this.splitPatentheses(str);\r\n\r\n        if (!lodash.isEmpty(parentheses)) {\r\n            for (const elm in parentheses) {\r\n                //Reemplazar el la query original cada elemento\r\n                workStr = workStr.replace(`${parentheses[elm]}`, `#${elm}`);\r\n                parsedElm.push(this.parse(parentheses[elm]));\r\n            }\r\n\r\n        }\r\n        console.log(workStr);\r\n\r\n        return this.parseQS(workStr, parsedElm);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Extrae los bloques entre parentesis (solo un nivel).\r\n     * \r\n     * @param {*} str \r\n     * @returns \r\n     */\r\n    splitPatentheses = (str) => {\r\n        const test = XRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');\r\n        return test;\r\n    }\r\n\r\n\r\n    /**\r\n     * Aplica una expresión regular para extraer los parámetros de búsqueda:\r\n     * - key: columna\r\n     * - operator: operador búsqueda\r\n     * - value: valor a buscar\r\n     * - logic: operador logico a utilizar\r\n     * - plain: parametro plano adicional (ejemplo +test o -asdfasdf). Necesario activar allowGlobalSearch\r\n     * @param {*} str \r\n     * @param {*} subgroups \r\n     * @returns \r\n     */\r\n    parseQS = (str, subgroups) => {\r\n        const regex = /((?<key>[^\\s|^:|^!:|^>:|^<:]+)(?<operator>:|!:|>:|<:)(?<value>[^\\s|\"|\\[]+|\".*?\"|\\[.*?\\]))? ?(?<logic>OR|AND)? ?(?<plain>[\\+|\\-|\\(#][^\\s]+|)? ?/gm;\r\n        let m;\r\n\r\n        let data = [];\r\n        while ((m = regex.exec(str)) !== null) {\r\n            // This is necessary to avoid infinite loops with zero-width matches\r\n            if (m.index === regex.lastIndex) {\r\n                regex.lastIndex++;\r\n            }\r\n            if (m === null) {\r\n                continue;\r\n            }\r\n            let { key, value, operator, plain, logic } = m.groups;\r\n\r\n            if (!operator) {\r\n                operator = \":\";\r\n            }\r\n\r\n            let type = \"LIKE\";\r\n            switch (operator) {\r\n                case \":\":\r\n                default:\r\n                    type = \"LIKE\";\r\n                    break;\r\n                case \"!:\":\r\n                    type = \"NOT LIKE\";\r\n                    break;\r\n                case \">:\":\r\n                    type = \">\";\r\n                    break;\r\n                case \"<:\":\r\n                    type = \"<\";\r\n                    break;\r\n            }\r\n            //Los corchetes marcan rangos con lo que si se detecta se cambia el tipo LIKE a BETWEEN\r\n            if (value && value.match(/\\[.*?\\]/)) {\r\n                type = type === 'NOT LIKE' ? \"NOT BETWEEN\" : \"BETWEEN\";\r\n            }\r\n            //Las comas implican varios valores con lo que si se detectan se cambia el tipo LIKE a IN\r\n            if (value && value.indexOf(',') !== -1) {\r\n                type = type === 'NOT LIKE' ? \"NOT IN\" : \"IN\";\r\n            }\r\n\r\n            if (key) {\r\n                data.push({\r\n                    key: this.checkAliases(key),\r\n                    operator: type,\r\n                    value: value,\r\n                    logic: logic || \"AND\"\r\n                });\r\n            }\r\n            // Gestion para añadir los indices de los subgrupos\r\n            if (plain && plain.indexOf('#') !== -1) {\r\n                const index = plain.replace(/#|\\(|\\)/g, '');\r\n                data.push(subgroups[parseInt(index)]);\r\n            } else if (this.allowGlobalSearch && plain && plain.indexOf('#') === -1) {\r\n                // Añadir las busquedas plain en caso de estar activadas.\r\n                let op = \"plain_+\";\r\n                if (plain.startsWith('-')) {\r\n                    op = \"plain_-\";\r\n                }\r\n                data.push({\r\n                    operator: op,\r\n                    value: plain.replace(/\\+|\\-/gm, ''),\r\n                    logic: logic || \"AND\"\r\n                });\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     * @param key \r\n     * @returns \r\n     */\r\n    checkAliases(key) {\r\n        if (!this.aliases) {\r\n            return key;\r\n        }\r\n        if (this.aliases[key]) {\r\n            return this.aliases[key]\r\n        }\r\n        if (this.aliases['*']) {\r\n            return this.aliases['*'].replaceAll(\"{{key}}\", key);\r\n        }\r\n        return key;\r\n    }\r\n}\r\n","export default class SQLParser {\r\n\r\n    constructor(table, dialect = \"pg\") {\r\n        this.table = table;\r\n        this.dialect = dialect;\r\n    }\r\n\r\n    /**\r\n     * Converte una lista de condiciones generada por el FQLParser en una condición String.\r\n     * \r\n     * Esta clase sirve como base para su extensión aplicando las conversiones necesarias en función del lenguaje a utilizar.\r\n     * \r\n     * @param {Array} object\r\n     */\r\n    parse(object) {\r\n        let query = \"\";\r\n        let bindings = [];\r\n        for (let element of object) {\r\n            if (Array.isArray(element)) {\r\n                const { query: subqry, bindings: subbind } = this.parse(element);\r\n                query += `(${subqry})`;\r\n                bindings = [...bindings, ...subbind];\r\n            } else if (typeof element === 'object') {\r\n                const { query: condition, bindings: bind } = this.convertCondition(element);\r\n                query += condition;\r\n                bindings = [...bindings, ...bind];\r\n            } else {\r\n                console.warn('Unknown type detected in qry');\r\n            }\r\n        }\r\n        query = query.replace(/( AND | OR )$/gm, \"\");\r\n        return { query, bindings }; //Quitar condicion final\r\n    }\r\n\r\n    /**\r\n     * Metodo base a ser extendido por los parsers para realizar las conversiones\r\n     * \r\n     * @param {object} condition \r\n     */\r\n    convertCondition(condition) {\r\n        if (!condition.key) {\r\n            if (this.dialect !== \"pg\") {\r\n                console.warn('Only PostgreSQL supports global searching');\r\n                return \"\";\r\n            }\r\n\r\n            let op = \"\";\r\n            if (condition.operator === \"plain_-\") {\r\n                op = \"NOT\";\r\n            }\r\n            return { query: `${op} to_tsvector(?::text) @@ to_tsquery(?) ${logic}`, bindings: [this.table, value] }\r\n        }\r\n\r\n        let { key, operator, value, logic } = condition;\r\n\r\n        let binding = \"?\";\r\n        let parsedValue = [value.replaceAll('\"', '')]; //Eliminar las dobles comillas\r\n\r\n        if (operator === \"BETWEEN\" || operator === \"NOT BETWEEN\") {\r\n            parsedValue = value.replace(/\\[|\\]/gm, '');\r\n            parsedValue = parsedValue.split(' TO ');\r\n            binding = \"? AND ?\";\r\n        }\r\n        if (operator === \"IN\" || operator === \"NOT IN\") {\r\n            parsedValue = [value.split(',')];\r\n        }\r\n\r\n        return { query: `${key} ${operator} ${binding} ${logic} `, bindings: parsedValue }\r\n    }\r\n}","import SQLParser from \"./SQLParser.mjs\";\r\n\r\nexport default class KnexParser extends SQLParser {\r\n\r\n    /**\r\n     * \r\n     * @param {Knex} builder \r\n     * @param {object} object \r\n     */\r\n    toKnex(builder, object) {\r\n        const parsed = this.parse(object);\r\n        return builder.whereRaw(parsed.query, parsed.bindings);\r\n    }\r\n}"],"names":["FQLParser","options","parse","str","parsedElm","workStr","parentheses","_this","splitPatentheses","lodash","isEmpty","elm","replace","push","console","log","parseQS","XRegExp","matchRecursive","subgroups","m","regex","data","exec","index","lastIndex","groups","key","value","operator","plain","logic","type","match","indexOf","checkAliases","parseInt","allowGlobalSearch","op","startsWith","this","aliases","replaceAll","SQLParser","table","dialect","object","query","bindings","element","Array","isArray","convertCondition","warn","condition","binding","parsedValue","split","KnexParser","toKnex","builder","parsed","whereRaw"],"mappings":"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"}